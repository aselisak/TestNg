TestNG
Is a testing tool that helps us to structure our test cases using different annotations

Benefits of TestNG
1.Reports
2.Annotation e.g @test, @before, @beforeclass
3.Parallel testing
4.batch execution
5.Assertionsâ€”> Hard Assertions, SoftAssertions
6.Data Parameterization

It can be integrated with cucumber, maven and selenium.

1.Annotations:
We do not need any main method

Annotation is a tag that provides additional information about class, interface or method in testNG
Annotation are used to keep the structure of the test cases
@Test
@BeforeMethod
@AfterMethod
@BeforeClass
@AfterClass

1.@Test
You should write your test cases under this annotation.
This is the main annotation
By default TestNG executes the methods in alphabetical order

2.@BeforeMethod
Runs every time before the @Test is executed
Also called precondition

3.@AfterMethod:
Runs after each test method
Also called post condition

before method is precondition that must run before every test case and post condition will run after the test case has ended

priority:
by default the priority is zero of all test cases
in order to give the priority order
use @Test(priority=1)

Enable:
@Test(enabled=True) by default run the cases
@Test(enabled=False) will not run the test cases that are set to False

DependsOn:
@Test(dependsOnMethods="method name")
will only run if the dependent method has passed successfully else it will be skipped

HardAssertions:
we have hardAssertions in TestNG
in order to use the assertion we use

Assert.assertionType()

1.Assert.AssertEquals(String1,String2);
it passes if String1 equals to String2
if fails if String1 equals to String2

2.Assert.AssertTrue(boolean Variable);
check the state of a boolean variable
it passes if the boolean is True
it fails if the boolean is False

In hard assertions if we have multiple assertions
as soon as one them fails it quites checking other assertions and declared the test case has failed


SoftAssertions:

soft assertion continue to check all the assertions regardless of the fact even if one or more assertions have failed,
which is not the scenario in case of HardAssertions (they stop execution when even one assertion fails.)

in order to use soft assertion
1.Declaration
SoftAssert soft = new SoftAssert();

2.soft.AssertEquals(String, String) instead of Assert.AssertEquals(String, String)
at the end you must do

3.soft.AssertAll().
after declaration when we use sof.assert it just checks

class 02
TestNg XML
<suite>
        <test>
        <classes>
           <class>
                <method>
               </method>
               </class>
             </classes>

             <packages>
          </package>
        </test>
</suite>

@BeforeClass
this annotation is used to execute the only once before the execution of the class
@AfterClass
this annotation is used to execute the only once after the execution of the class

@BeforeTest
this annotation is used to execute the method only once before the execution of the class

whenever we run by groups
the @beforeMethod and @afterMethod do nut run because they are not under the tag of groups

when we ran by method name
@beforeMethod and afterMethod

Class 03
TestNg in XML
helps us to control the execution of the test cases

1. <suite>
         <test>
             <classes>
                    <class name="class name">
                    <class name=<class name"/>
                                         <method>
                                                <include name="method name"/>
                                        </method>
             </classes>
                   <packages>
                          <package name="package name"/>
                   </packages>
         </test>
   </suite>
when we run a specific method from class, if it has any before and after method they will be executed even if we
do not select them run it

Executing our test cases on group level
1. when we execute in our xml using groups, by default @beforeMethod and @afterMethod will not execute
Only the methods tagged under that particular group will be executed

In order to deal with this problem, because if we have any @BeforeMethod where we are doing some initialization
we use to following method
i.e
put(alwaysRun=true) in front of your @beforeMethod and @afterMethod

whenever you aare running by groups and u get error of null exception
the first thing to check is
@beforeMethod is set to "alwaysRun=true"

Listeners
Listener class listen to events like test failed/pass/skipped
once the testcase has executed
and it either fails/skip/pass
depending upon status
listeners class takes you to the execution of the code that you have written for scenarios
if your test case fails/pass or skips

Implementation of listeners class:
Listeners class implements ITlisteners
which is interface from TestNg
and we override the functions according to our need

after that you need to link the listeners class to the class on which you want to listen
that can be done using TextNg.Xml

u define ur <listeners> tag under <suite> and then write down the classes you want to it listen

DataProvider in TestNg
Data provider is used for data driven testing.
use data provider for small data sets
for greater one use excel

if we want to declare our data set it must be under @dataprovider

if we want our test case to utilize this dataproviderwe don't need a main method with
what do we need to do?
@test(dataprovider="name of dataprovider")
public void test(){

}



























